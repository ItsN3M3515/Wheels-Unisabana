openapi: 3.0.3
info:
  title: Wheels-Unisabana API
  version: 1.0.0
  description: API para el sistema de carpooling de la Universidad de La Sabana
  contact:
    name: Wheels-Unisabana Team
    email: support@wheels-unisabana.edu.co
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000
    description: Development server
tags:
  - name: System
    description: Endpoints del sistema
  - name: Users
    description: Gestión de usuarios
  - name: Vehicles
    description: Gestión de vehículos (drivers)
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: access_token
      description: JWT stored in httpOnly cookie
  schemas:
    ErrorValidation:
      type: object
      properties:
        code:
          type: string
          example: invalid_schema
        message:
          type: string
          example: Validation failed
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: firstName
              issue:
                type: string
                example: min length 2
        correlationId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
    ErrorConflict:
      type: object
      properties:
        code:
          type: string
          example: duplicate_email
        message:
          type: string
          example: corporateEmail already exists
        correlationId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
    ErrorUnauthorized:
      type: object
      properties:
        code:
          type: string
          example: unauthorized
        message:
          type: string
          example: Missing or invalid session
        correlationId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
    ErrorForbidden:
      type: object
      properties:
        code:
          type: string
          example: immutable_field
        message:
          type: string
          example: One or more fields cannot be updated
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: corporateEmail
              issue:
                type: string
                example: immutable
        correlationId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
    ErrorPayloadTooLarge:
      type: object
      properties:
        code:
          type: string
          example: payload_too_large
        message:
          type: string
          example: File exceeds limit
        correlationId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          example: 665e2a...f1
        role:
          type: string
          enum:
            - passenger
            - driver
          example: passenger
        firstName:
          type: string
          example: Ana
        lastName:
          type: string
          example: Ruiz
        universityId:
          type: string
          example: '202420023'
        corporateEmail:
          type: string
          format: email
          example: aruiz@unisabana.edu.co
        phone:
          type: string
          example: '+573001112233'
        profilePhotoUrl:
          type: string
          nullable: true
          example: https://cdn.example/u/665e2a/avatar.jpg
        driver:
          type: object
          nullable: true
          properties:
            hasVehicle:
              type: boolean
              example: false
          description: Only present for role=driver
    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          example: Ana María
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          example: Ruiz García
        phone:
          type: string
          pattern: ^\+[1-9]\d{1,14}$
          example: '+573001112233'
      description: At least one field required
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login (session creation)
      description: |
        Authenticates user and sets httpOnly cookie with JWT.

        **Security**:
        - Rate limited (5 attempts/min/IP)
        - Generic error messages (no user enumeration)
        - HttpOnly cookie (XSS protection)
        - Secure flag in production
        - SameSite cookie (CSRF protection)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - corporateEmail
                - password
              properties:
                corporateEmail:
                  type: string
                  format: email
                  example: jdoe@unisabana.edu.co
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: YourPassword123!
            examples:
              passenger:
                summary: Passenger login
                value:
                  corporateEmail: passenger@unisabana.edu.co
                  password: SecurePass123!
              driver:
                summary: Driver login
                value:
                  corporateEmail: driver@unisabana.edu.co
                  password: SecurePass123!
      responses:
        '200':
          description: Login successful, session cookie set
          headers:
            Set-Cookie:
              description: JWT access token
              schema:
                type: string
                example: access_token=eyJ...; HttpOnly; Secure; Path=/; SameSite=Lax; Max-Age=7200
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 665e2a...f1
                  role:
                    type: string
                    enum:
                      - passenger
                      - driver
                    example: driver
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: Doe
              examples:
                success:
                  summary: Successful login
                  value:
                    id: 665e2a...f1
                    role: driver
                    firstName: John
                    lastName: Doe
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorValidation'
              example:
                code: invalid_schema
                message: Validation failed
                details:
                  - field: corporateEmail
                    issue: corporateEmail must be a valid email address
                correlationId: 123e4567-e89b-12d3-a456-426614174000
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: invalid_credentials
                  message:
                    type: string
                    example: Email or password is incorrect
                  correlationId:
                    type: string
              example:
                code: invalid_credentials
                message: Email or password is incorrect
                correlationId: 123e4567-e89b-12d3-a456-426614174000
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: too_many_attempts
                  message:
                    type: string
                    example: Too many login attempts, try again later
              example:
                code: too_many_attempts
                message: Too many login attempts, try again later
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout (session destruction)
      description: |
        Clears the httpOnly cookie to revoke the session.

        **Idempotent**: Can be called with or without authentication.

        **Cookie Removal**: Sets access_token cookie with Max-Age=0 and matching attributes.
      responses:
        '200':
          description: Logout successful, cookie cleared
          headers:
            Set-Cookie:
              description: Clear access_token cookie
              schema:
                type: string
                example: access_token=; HttpOnly; Secure; Path=/; SameSite=Lax; Max-Age=0
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
              example:
                ok: true
  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user session/identity
      description: |
        Returns minimal user identity for session verification.

        **Protected**: Requires valid JWT cookie (set by /auth/login).

        **Security**:
        - No secrets or internal fields exposed
        - Cache-Control: no-store (never cache)
        - PII redaction in logs
        - Correlation ID for observability

        **Use case**: Client renders protected UI without re-login
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Current user identity
          headers:
            Cache-Control:
              description: Prevent caching of sensitive data
              schema:
                type: string
                example: no-store
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 665e2a...f1
                  role:
                    type: string
                    enum:
                      - passenger
                      - driver
                    example: driver
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: Doe
                  driver:
                    type: object
                    description: Only present for drivers
                    properties:
                      hasVehicle:
                        type: boolean
                        example: true
              examples:
                driver_with_vehicle:
                  summary: Driver with vehicle
                  value:
                    id: 665e2a...f1
                    role: driver
                    firstName: John
                    lastName: Doe
                    driver:
                      hasVehicle: true
                driver_without_vehicle:
                  summary: Driver without vehicle
                  value:
                    id: 665e2a...f2
                    role: driver
                    firstName: Jane
                    lastName: Smith
                    driver:
                      hasVehicle: false
                passenger:
                  summary: Passenger
                  value:
                    id: 665e2a...f3
                    role: passenger
                    firstName: Alice
                    lastName: Johnson
        '401':
          description: Missing or invalid session
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: unauthorized
                  message:
                    type: string
                    example: Missing or invalid session
                  correlationId:
                    type: string
              example:
                code: unauthorized
                message: Missing or invalid session
                correlationId: 123e4567-e89b-12d3-a456-426614174000
  /auth/password/reset-request:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: |
        Initiates a password reset process for a user (out-of-session).

        **Security**:
        - Generic 200 response (never reveals if email exists)
        - Rate limited (3 requests per 15 min per IP)
        - PII redaction in logs (email never logged)
        - Cryptographically secure token (32 bytes random)
        - Token expires in 15 minutes
        - One-time use token (consumed after reset)

        **Flow**:
        1. User provides email
        2. If account exists: token generated and sent via email
        3. If account doesn't exist: generic success (no enumeration)
        4. User receives email with reset link (MVP: check server logs)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - corporateEmail
              properties:
                corporateEmail:
                  type: string
                  format: email
                  example: jdoe@unisabana.edu.co
            examples:
              request:
                summary: Password reset request
                value:
                  corporateEmail: jdoe@unisabana.edu.co
      responses:
        '200':
          description: |
            Generic success response (always returned).

            Note: Response is intentionally generic to prevent user enumeration.
            If the email exists, a reset token is generated and sent.
            If the email doesn't exist, the same response is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
              example:
                ok: true
        '400':
          description: Validation error (invalid email format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorValidation'
              example:
                code: invalid_schema
                message: Validation failed
                details:
                  - field: corporateEmail
                    issue: corporateEmail must be a valid email address
                correlationId: 123e4567-e89b-12d3-a456-426614174000
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: too_many_attempts
                  message:
                    type: string
                    example: Please try again later
              example:
                code: too_many_attempts
                message: Please try again later
  /auth/password/reset:
    post:
      tags:
        - Authentication
      summary: Reset password using token (out-of-session)
      description: |
        Redeems a password reset token to set a new password.

        **Token Validation**:
        - Token is hashed (SHA-256) before lookup
        - Checked against database hash (constant-time comparison)
        - Must not be expired (15-minute window)
        - Must not be already consumed (one-time use)

        **Password Requirements**:
        - Minimum 8 characters
        - At least one uppercase letter
        - At least one lowercase letter
        - At least one number
        - At least one special character (@$!%*?&)

        **Security**:
        - New password is hashed with bcrypt before storage
        - Token is marked as consumed (one-time use)
        - passwordChangedAt timestamp is updated
        - All operations are logged without sensitive data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                  description: Base64url-encoded token from reset email
                  pattern: ^[A-Za-z0-9_-]+$
                  minLength: 43
                  example: abc123XYZ-_token_from_email_url
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  maxLength: 128
                  description: Strong password meeting complexity requirements
                  example: NewSecurePass123!
            examples:
              valid:
                summary: Valid reset request
                value:
                  token: k7n3R9xZ2pQ8vM5wL1jT4hG6fD0sA9cB2eN8uY7iO3qW5rT1xK4mP6vL2jH9gF0
                  newPassword: NewSecurePass123!
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
              example:
                ok: true
        '400':
          description: Invalid token or validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    enum:
                      - invalid_schema
                      - invalid_token
                  message:
                    type: string
                  correlationId:
                    type: string
              examples:
                invalid_token:
                  summary: Invalid or not found token
                  value:
                    code: invalid_token
                    message: The reset link is invalid
                    correlationId: 123e4567-e89b-12d3-a456-426614174000
                invalid_schema:
                  summary: Validation error
                  value:
                    code: invalid_schema
                    message: Validation failed
                    details:
                      - field: newPassword
                        issue: newPassword must contain at least one uppercase letter, one lowercase letter, one number, and one special character
                    correlationId: 123e4567-e89b-12d3-a456-426614174000
        '409':
          description: Token already used
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: token_used
                  message:
                    type: string
                    example: The reset link has already been used
                  correlationId:
                    type: string
              example:
                code: token_used
                message: The reset link has already been used
                correlationId: 123e4567-e89b-12d3-a456-426614174000
        '410':
          description: Token expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: token_expired
                  message:
                    type: string
                    example: The reset link has expired
                  correlationId:
                    type: string
              example:
                code: token_expired
                message: The reset link has expired
                correlationId: 123e4567-e89b-12d3-a456-426614174000
  /auth/password:
    patch:
      tags:
        - Authentication
      summary: Change password (in-session, authenticated)
      description: |
        Allows authenticated users to change their password by providing
        current password and a new strong password.

        **Authentication Required**: Must have valid JWT cookie from /auth/login

        **Password Verification**:
        - Current password verified with bcrypt (timing-safe)
        - If current password wrong → 401 invalid_credentials

        **New Password Requirements**:
        - Minimum 8 characters
        - At least one uppercase letter
        - At least one lowercase letter
        - At least one number
        - At least one special character (@$!%*?&)

        **Security**:
        - New password hashed with bcrypt before storage
        - passwordChangedAt timestamp updated
        - All operations logged without passwords
        - Session remains valid after password change
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  format: password
                  description: Current password for verification
                  example: OldSecret123
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  maxLength: 128
                  description: New strong password meeting complexity requirements
                  example: CorrectHorseBatteryStaple!
            examples:
              valid:
                summary: Valid password change
                value:
                  currentPassword: OldSecret123
                  newPassword: NewSecurePass123!
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
              example:
                ok: true
        '400':
          description: Validation error (weak new password)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorValidation'
              example:
                code: invalid_schema
                message: Validation failed
                details:
                  - field: newPassword
                    issue: newPassword must contain at least one uppercase letter, one lowercase letter, one number, and one special character
                correlationId: 123e4567-e89b-12d3-a456-426614174000
        '401':
          description: Authentication failed or current password incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    enum:
                      - unauthorized
                      - invalid_credentials
                  message:
                    type: string
                  correlationId:
                    type: string
              examples:
                invalid_credentials:
                  summary: Wrong current password
                  value:
                    code: invalid_credentials
                    message: Email or password is incorrect
                    correlationId: 123e4567-e89b-12d3-a456-426614174000
                unauthorized:
                  summary: Not authenticated
                  value:
                    code: unauthorized
                    message: Authentication required
                    correlationId: 123e4567-e89b-12d3-a456-426614174000
  /api/users/me:
    get:
      tags:
        - Users
      summary: Get my profile
      description: |
        Returns the authenticated user's profile with sanitized data.
        For drivers, includes `driver.hasVehicle` computed dynamically.
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
              examples:
                passenger:
                  summary: Passenger profile
                  value:
                    id: 665e2a...f1
                    role: passenger
                    firstName: Ana
                    lastName: Ruiz
                    universityId: '202420023'
                    corporateEmail: aruiz@unisabana.edu.co
                    phone: '+573001112233'
                    profilePhotoUrl: https://cdn.example/u/665e2a/avatar.jpg
                driver:
                  summary: Driver profile with vehicle status
                  value:
                    id: 665e2a...f2
                    role: driver
                    firstName: Carlos
                    lastName: Gómez
                    universityId: '202420024'
                    corporateEmail: cgomez@unisabana.edu.co
                    phone: '+573004445566'
                    profilePhotoUrl: null
                    driver:
                      hasVehicle: true
        '401':
          description: Unauthorized - Missing or invalid session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
              examples:
                missingToken:
                  summary: No access_token cookie
                  value:
                    code: unauthorized
                    message: Missing or invalid session
                    correlationId: 123e4567-e89b-12d3-a456-426614174000
                expiredToken:
                  summary: Token expired
                  value:
                    code: token_expired
                    message: Session expired
                    correlationId: 123e4567-e89b-12d3-a456-426614174000
    patch:
      tags:
        - Users
      summary: Update my profile (partial)
      description: |
        Update authenticated user's profile. Supports JSON and multipart/form-data.

        **Allowed fields**: `firstName`, `lastName`, `phone`, `profilePhoto` (file)
        **Immutable fields** (403): `corporateEmail`, `universityId`, `role`, `id`, `password`

        Photo replacement is atomic: old photo deleted only after successful update.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
            examples:
              updateName:
                summary: Update first name only
                value:
                  firstName: Ana María
              updatePhone:
                summary: Update phone only
                value:
                  phone: '+573001112244'
              updateMultiple:
                summary: Update multiple fields
                value:
                  firstName: Ana María
                  lastName: Ruiz García
                  phone: '+573001112244'
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 2
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 2
                  maxLength: 50
                phone:
                  type: string
                  pattern: ^\\+[1-9]\\d{1,14}$
                profilePhoto:
                  type: string
                  format: binary
                  description: JPEG, PNG, or WebP image (max 5MB)
            examples:
              withPhoto:
                summary: Update with new profile photo
                value:
                  firstName: Ana María
                  profilePhoto: (binary file data)
              photoOnly:
                summary: Replace photo without other changes
                value:
                  profilePhoto: (binary file data)
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
              examples:
                updated:
                  summary: Updated profile
                  value:
                    id: 665e2a...f1
                    role: passenger
                    firstName: Ana María
                    lastName: Ruiz
                    universityId: '202420023'
                    corporateEmail: aruiz@unisabana.edu.co
                    phone: '+573001112244'
                    profilePhotoUrl: /uploads/profiles/profilePhoto-1701010101010-123.jpg
        '400':
          description: Validation error or unknown field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorValidation'
              examples:
                validationFailed:
                  summary: Invalid field format
                  value:
                    code: invalid_schema
                    message: Validation failed
                    details:
                      - field: firstName
                        issue: firstName length must be at least 2 characters long
                    correlationId: 123e4567-e89b-12d3-a456-426614174000
                unknownField:
                  summary: Unknown field provided
                  value:
                    code: invalid_schema
                    message: Unknown fields provided
                    details:
                      - field: unknownField
                        issue: unknown field
                    correlationId: 123e4567-e89b-12d3-a456-426614174000
                invalidFileType:
                  summary: Invalid MIME type
                  value:
                    code: invalid_file_type
                    message: Unsupported MIME type
                    correlationId: 123e4567-e89b-12d3-a456-426614174000
        '401':
          description: Unauthorized - Missing or invalid session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        '403':
          description: Forbidden - Attempt to modify immutable field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
              examples:
                immutableField:
                  summary: Attempt to change corporateEmail
                  value:
                    code: immutable_field
                    message: One or more fields cannot be updated
                    details:
                      - field: corporateEmail
                        issue: immutable
                    correlationId: 123e4567-e89b-12d3-a456-426614174000
                multipleImmutable:
                  summary: Multiple immutable fields
                  value:
                    code: immutable_field
                    message: One or more fields cannot be updated
                    details:
                      - field: corporateEmail
                        issue: immutable
                      - field: role
                        issue: immutable
                    correlationId: 123e4567-e89b-12d3-a456-426614174000
        '413':
          description: Payload too large - File exceeds size limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayloadTooLarge'
              example:
                code: payload_too_large
                message: File exceeds limit
                correlationId: 123e4567-e89b-12d3-a456-426614174000
