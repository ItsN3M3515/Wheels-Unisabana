{
  "openapi": "3.0.3",
  "info": {
    "title": "Wheels-Unisabana API",
    "version": "0.1.0",
    "description": "## Authentication\n\nThis API uses cookie-based JWT authentication with CSRF protection.\n\n### Cookie Behavior\n\n**access_token Cookie:**\n- Purpose: Contains JWT for user authentication\n- Flags: `HttpOnly` (prevents XSS), `Secure` (HTTPS only in production), `SameSite=Lax`\n- Path: `/` (available to all endpoints)\n- Max-Age: 7200 seconds (2 hours)\n- Set on: POST /auth/login\n- Cleared on: POST /auth/logout (Max-Age=0)\n\n**csrf_token Cookie:**\n- Purpose: CSRF protection via double-submit pattern\n- Flags: NOT HttpOnly (client must read it), `Secure` (HTTPS only in production), `SameSite=Lax`\n- Path: `/` (available to all endpoints)\n- Max-Age: 3600 seconds (1 hour)\n- Set on: POST /auth/login\n- Cleared on: POST /auth/logout (Max-Age=0)\n- Usage: Client reads cookie value and sends it in `X-CSRF-Token` header for state-changing requests\n\n### Protected Endpoints\n\nEndpoints requiring authentication will return:\n- **401 Unauthorized**: Missing or invalid access_token cookie\n- **403 Forbidden**: Valid authentication but insufficient role permissions\n- **403 CSRF Mismatch**: Missing or invalid X-CSRF-Token header (for POST/PATCH/DELETE)\n\n### Rate Limiting\n\nPOST /auth/login is rate limited to:\n- 5 requests per minute per IP address\n- 5 requests per minute per email address\n- Returns 429 when limit exceeded"
  },
  "servers": [
    { "url": "http://localhost:3001" }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "Login with corporate email and password",
        "description": "Authenticates user and sets two cookies: (1) access_token (HttpOnly, 2h expiry) containing JWT for authentication, and (2) csrf_token (non-HttpOnly, 1h expiry) for CSRF protection. Rate limited to 5 attempts per minute per IP and per email address.",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "corporateEmail": { "type": "string", "format": "email", "example": "jdoe@uni.edu" },
                  "password": { "type": "string", "example": "CorrectHorseBatteryStaple!" }
                },
                "required": ["corporateEmail", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful. Two cookies are set: access_token (HttpOnly for security) and csrf_token (readable by JavaScript for double-submit pattern). The response body contains minimal user profile information.",
            "headers": {
              "Set-Cookie": {
                "schema": { 
                  "type": "array",
                  "items": { "type": "string" },
                  "example": [
                    "access_token=eyJ...; HttpOnly; Secure; Path=/; SameSite=Lax; Max-Age=7200",
                    "csrf_token=a1b2c3...; Secure; Path=/; SameSite=Lax; Max-Age=3600"
                  ]
                }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid schema",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "string", "example": "invalid_credentials" },
                    "message": { "type": "string", "example": "Email or password is incorrect" }
                  },
                  "required": ["code", "message"]
                }
              }
            }
          },
          "429": {
            "description": "Too many attempts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "string", "example": "too_many_attempts" },
                    "message": { "type": "string", "example": "Too many login attempts, try again later" }
                  },
                  "required": ["code", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logout and clear session cookies",
        "tags": ["Authentication"],
        "description": "Clears both access_token and csrf_token cookies by setting Max-Age=0. This is client-side logout for stateless JWTs. For immediate server-side invalidation, implement a token denylist. The endpoint works regardless of authentication state.",
        "responses": {
          "200": {
            "description": "Logout successful. Both access_token and csrf_token cookies are cleared. The Set-Cookie headers will contain Max-Age=0 to remove the cookies from the client.",
            "headers": {
              "Set-Cookie": {
                "schema": { 
                  "type": "array",
                  "items": { "type": "string" },
                  "example": [
                    "access_token=; HttpOnly; Secure; Path=/; SameSite=Lax; Max-Age=0",
                    "csrf_token=; Secure; Path=/; SameSite=Lax; Max-Age=0"
                  ]
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": { "type": "boolean", "example": true }
                  },
                  "required": ["ok"]
                }
              }
            }
          }
        }
      }
    },
    "/drivers/vehicle": {
      "get": {
        "summary": "Get current driver's vehicle information",
        "tags": ["Drivers"],
        "security": [{ "cookieAuth": [] }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vehicleId": { "type": "string", "nullable": true, "example": "ABC123" },
                    "hasVehicle": { "type": "boolean", "example": true }
                  },
                  "required": ["vehicleId", "hasVehicle"]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" }
        }
      },
      "post": {
        "summary": "Register a new vehicle for the current driver",
        "tags": ["Drivers"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "X-CSRF-Token",
            "in": "header",
            "required": true,
            "description": "CSRF token from csrf_token cookie (double-submit pattern)",
            "schema": { "type": "string", "example": "a1b2c3d4e5f6..." }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vehicleId": { "type": "string", "example": "ABC123" }
                },
                "required": ["vehicleId"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vehicleId": { "type": "string", "example": "ABC123" },
                    "hasVehicle": { "type": "boolean", "example": true }
                  },
                  "required": ["vehicleId", "hasVehicle"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid schema",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/CsrfOrForbidden" }
        }
      },
      "patch": {
        "summary": "Update current driver's vehicle information",
        "tags": ["Drivers"],
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "X-CSRF-Token",
            "in": "header",
            "required": true,
            "description": "CSRF token from csrf_token cookie (double-submit pattern)",
            "schema": { "type": "string", "example": "a1b2c3d4e5f6..." }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vehicleId": { "type": "string", "example": "XYZ789" }
                },
                "required": ["vehicleId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vehicle updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vehicleId": { "type": "string", "example": "XYZ789" },
                    "hasVehicle": { "type": "boolean", "example": true }
                  },
                  "required": ["vehicleId", "hasVehicle"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid schema",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/CsrfOrForbidden" }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get current user profile",
        "security": [{ "cookieAuth": [] }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserProfile" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      },
      "patch": {
        "summary": "Update current user profile",
        "security": [{ "cookieAuth": [] }],
        "parameters": [
          {
            "name": "X-CSRF-Token",
            "in": "header",
            "required": true,
            "description": "CSRF token from csrf_token cookie (double-submit pattern)",
            "schema": { "type": "string", "example": "a1b2c3d4e5f6..." }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": { "type": "string" },
                  "lastName": { "type": "string" },
                  "phone": { "type": "string", "description": "E.164" }
                },
                "additionalProperties": false
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": { "type": "string" },
                  "lastName": { "type": "string" },
                  "phone": { "type": "string" },
                  "profilePhoto": { "type": "string", "format": "binary" }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserProfile" } }
            }
          },
          "400": {
            "description": "Invalid schema",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationError" }
              }
            }
          },
          "403": {
            "description": "Immutable or forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ImmutableFieldError" }
              }
            }
          },
          "413": {
            "description": "Payload too large",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PayloadTooLarge" }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "access_token"
      }
    },
    "schemas": {
      "LoginResponse": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "665e2a...f1" },
          "role": { "type": "string", "enum": ["passenger", "driver", "admin"], "example": "driver" },
          "firstName": { "type": "string", "example": "John" },
          "lastName": { "type": "string", "example": "Doe" }
        },
        "required": ["id", "role", "firstName", "lastName"]
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "role": { "type": "string", "enum": ["passenger","driver","admin"] },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "universityId": { "type": "string" },
          "corporateEmail": { "type": "string", "format": "email" },
          "phone": { "type": "string" },
          "profilePhotoUrl": { "type": "string", "nullable": true },
          "driver": {
            "type": "object",
            "properties": { "hasVehicle": { "type": "boolean" } },
            "required": ["hasVehicle"]
          }
        },
        "required": ["id","role","firstName","lastName","universityId","corporateEmail","phone","driver"]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "code": { "type": "string", "example": "invalid_schema" },
          "message": { "type": "string" },
          "details": {
            "type": "array",
            "items": { "type": "object", "properties": { "field": {"type":"string"}, "issue": {"type":"string"} }, "required": ["field","issue"] }
          }
        },
        "required": ["code","message"]
      },
      "ImmutableFieldError": {
        "type": "object",
        "properties": {
          "code": { "type": "string", "example": "immutable_field" },
          "message": { "type": "string" },
          "details": {
            "type": "array",
            "items": { "type": "object", "properties": { "field": {"type":"string"}, "issue": {"type":"string"} }, "required": ["field","issue"] }
          }
        },
        "required": ["code","message"]
      },
      "PayloadTooLarge": {
        "type": "object",
        "properties": {
          "code": { "type": "string", "example": "payload_too_large" },
          "message": { "type": "string" }
        },
        "required": ["code","message"]
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized - Authentication required. Returned when access_token cookie is missing, invalid, expired, or has an invalid signature. Client should redirect to login.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": { "type": "string", "example": "unauthorized" },
                "message": { "type": "string", "example": "Missing or invalid session" }
              },
              "required": ["code","message"]
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - Insufficient permissions. Returned when the authenticated user's role does not have permission to access the resource. The message indicates which role(s) are required.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": { "type": "string", "example": "forbidden" },
                "message": { "type": "string", "example": "Access denied. Required role: driver" }
              },
              "required": ["code","message"]
            }
          }
        }
      },
      "CsrfOrForbidden": {
        "description": "CSRF token mismatch or insufficient permissions. Code 'csrf_mismatch' indicates the X-CSRF-Token header is missing or doesn't match the csrf_token cookie (double-submit pattern validation failed). Code 'forbidden' indicates insufficient role permissions.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": { "type": "string", "example": "csrf_mismatch", "enum": ["csrf_mismatch", "forbidden"] },
                "message": { "type": "string", "example": "CSRF token missing or invalid" }
              },
              "required": ["code","message"]
            }
          }
        }
      }
    }
  }
}
